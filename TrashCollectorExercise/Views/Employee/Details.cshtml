@model TrashCollectorExercise.Models.ViewModels.GeocoderViewModel

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Customer</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.customer.firstName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.firstName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.lastName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.lastName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.streetAddress)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.streetAddress)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.city)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.city)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.zip)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.zip)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.balance)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.balance)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.startBreak)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.startBreak)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.endBreak)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.endBreak)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.customer.oneTimePickup)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.customer.oneTimePickup)
        </dd>

        @*<dt>
                @Html.DisplayNameFor(model => model.ApplicationId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ApplicationId)
            </dd>*@

    </dl>
</div>
<p>
    @*@Html.ActionLink("Edit", "Edit", new { id = Model.Id })*@ |
    @Html.ActionLink("Back to List", "Index")
</p>





<div id="map" style="min-height: 200px;"></div>
    

    <script>


        @{


        API api = new API();
        string googleRequest = api.GoogleAPICall;
        string keyy = api.Key;
        string lat = Model.lat;
        string lng = Model.lng;

    }
        </script>
    <script defer
        src=@googleRequest type="text/javascript">
    </script>
    <script defer type="text/javascript">
        let map;
        let latA = "@lat";
        let lngA = "@lng";

        function initMap() {
            
        // Constructor creates a new map - only center and zoom are required.
         map = new google.maps.Map(document.getElementById('map'), {
                center: {
            lat: parseFloat(latA),
            lng: parseFloat(lngA)
        },
            zoom: 13
        });
        var destination = { lat: parseFloat(latA), lng: parseFloat(lngA)};
        var marker = new google.maps.Marker({
            position: destination,
            map: map,
            title: "@Model.address"
        });
            console.log(marker);
            console.log('oy')
    }
</script>




